" ==== 基本配置
set number
set noswapfile
set backspace=indent,start,eol
set iskeyword+=-
set clipboard=unnamedplus
set fileencoding=utf-8
set encoding=utf-8
set conceallevel=0 "在markdown文件中可以看到``
set ignorecase
set smartcase
set tabstop=4
set shiftwidth=4
set expandtab "tab键永远输入的是空格
set softtabstop=0 "关闭空格tab混用
autocmd FileType html,css,xml,yaml,json set sw=2 ts=2
set cursorline
colorscheme gruvbox
set hidden
set autoindent
set list
silent set listchars lcs=tab:>-,trail:.
set scrolloff=3
set textwidth=0 "使用gq生效
set termguicolors
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set splitright
set splitbelow
set noshowmode
set showcmd
set inccommand=split "仅支持:s替换
set wildmenu
set virtualedit=block
set shortmess+=c
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif "如果在退出时有修改, 则再次打开时自动跳转到修改的地方

"==== 按键映射
let mapleader=' '
nmap <leader><cr> :set nohlsearch<CR>
nmap <leader>w :w<CR>
nmap <leader>q :bd<CR>
imap jk <ESC>
imap kj <ESC>
nmap ; :
xmap ; :
nmap <C-l> <C-w>l
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <TAB> :bn<CR>
iabbrev mian main
nmap <C-UP> :res +5<CR>
nmap <C-DOWN> :res -5<CR>
nmap <C-LEFT> :vertical resize-5<CR>
nmap <C-RIGHT> :vertical resize+5<CR>
nmap <leader>sp <C-w>t<C-w>K
nmap <leader>sv <C-w>t<C-w>H
noremap <leader>srp <C-w>b<C-w>K
noremap <leader>srv <C-w>b<C-w>H
nmap < <<
nmap > >>

"==== Vim plug
call plug#begin('~/.config/nvim/plugged')
    "NerdTree
    Plug 'preservim/nerdtree' |
            \ Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'ryanoasis/vim-devicons'
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

    "vim-airline
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    "The fastest (Neo)Vim plugin for asynchronously displaying the colours in the file (#rrggbb, #rgb, rgb(a)
    "需要安装GO
    Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }

    "Coc.nvim
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
        "搭配coc-emmet, coc-emmet仅提供补全，搭配emmet-vim, 使用其余功能
    Plug 'mattn/emmet-vim'

    "tmux补全
    Plug 'wellle/tmux-complete.vim'

    "Snippets 强大的代码补全
    Plug 'SirVer/ultisnips'
    Plug 'theniceboy/vim-snippets'

    "后悔药
    Plug 'mbbill/undotree'

    "对齐
    Plug 'godlygeek/tabular'

    "对齐线
    Plug 'Yggdroot/indentLine'

    "语法检查
    Plug 'vim-syntastic/syntastic'

    "注释
    Plug 'scrooloose/nerdcommenter'

    "自动配对
    Plug 'jiangmiao/auto-pairs'

    "添加包裹符号神器
    Plug 'tpope/vim-surround'

    "预览MarkDown
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

    "开屏暴击
    Plug 'mhinz/vim-startify'

    "Bd不破坏view
    Plug 'moll/vim-bbye'

    " 生成markdown TOC
    Plug 'mzlogin/vim-markdown-toc'

    "一个很棒的自动表格创建器, 格式化程序允许您在键入时创建整洁的表。
    Plug 'dhruvasagar/vim-table-mode'

    " 字符切换
    Plug 'AndrewRadev/switch.vim'

    " surroundings
    Plug 'tpope/vim-surround'
    "Gruvbox
    Plug 'morhetz/gruvbox'
    "自动保存
    "Plug '907th/vim-auto-save'
    Plug 'vim-scripts/vim-auto-save'
call plug#end()

"==== 插件配置
"
" NERDTree
nnoremap <leader>` :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
" Start NERDTree and put the cursor back in the other window.
autocmd VimEnter * NERDTree | wincmd p


" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif


" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

" Vim-airline
let g:airline_theme='base16_adwaita'
let g:airline#extensions#tabline#enabled=1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_powerline_fonts = 0

" Vim-hexokinase
let g:Hexokinase_highlighters = [
\   'sign_column',
\   'backgroundfull',
\ ]

" Coc.nvim
"
let g:coc_global_extensions = [
    \ 'coc-json',
    \ 'coc-vimlsp',
    \ 'coc-css',
    \ 'coc-cssmodules',
    \ 'coc-eslint',
    \ 'coc-html',
    \ 'coc-emmet',
    \ 'coc-tsserver',
    \ 'coc-yank',
    \ 'coc-vetur',
    \ 'coc-marketplace',
    \]
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Autopairs
let g:AutoPairsMultilineClose=0

" Switch
let g:switch_mapping = "-"

" Vim-table-mode
function! s:isAtStartOfLine(mapping)
  let text_before_cursor = getline('.')[0 : col('.')-1]
  let mapping_pattern = '\V' . escape(a:mapping, '\')
  let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
  return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
endfunction

inoreabbrev <expr> <bar><bar>
          \ <SID>isAtStartOfLine('\|\|') ?
          \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
inoreabbrev <expr> __
          \ <SID>isAtStartOfLine('__') ?
          \ '<c-o>:silent! TableModeDisable<cr>' : '__'

let g:table_mode_always_active = 0

" Ultisnips
let g:UltiSnipsExpandTrigger       = "<c-q>"
let g:UltiSnipsListSnippets        = "<c-cr>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsEditSplit="vertical"

" ==== 命令配置
noremap  <Space>r :call CompileRunGcc()<CR>
func! CompileRunGcc()
 exec "w"
 if &filetype == 'c'
  exec "!g++ % -o %<"
  exec "!time ./%<"
 elseif &filetype == 'cpp'
  set splitbelow
  exec "!g++ -std=c++11 % -Wall -o %<"
  :sp
  :res -15
  :term ./%<
 elseif &filetype == 'java'
  exec "!javac %"
  exec "!time java %<"
 elseif &filetype == 'sh'
  :!time bash %
 elseif &filetype == 'python'
  set splitbelow
  :sp
  :term python3 %
 elseif &filetype == 'html'
  silent! exec "!google-chrome % &"
 elseif &filetype == 'markdown'
  exec "MarkdownPreview"
 elseif &filetype == 'tex'
  silent! exec "VimtexStop"
  silent! exec "VimtexCompile"
 elseif &filetype == 'dart'
  exec "CocCommand flutter.run -d ".g:flutter_default_device." ".g:flutter_run_args
  silent! exec "CocCommand flutter.dev.openDevLog"
 elseif &filetype == 'javascript'
  set splitbelow
  :sp
  :term export DEBUG="INFO,ERROR,WARNING"; node --trace-warnings .
 elseif &filetype == 'go'
  set splitbelow
  :sp
  :term go run .
 endif
endfunc

autocmd FileType coc-explorer,markdown :IndentLinesDisable
autocmd BufRead * setlocal foldmethod=marker
autocmd BufRead * normal zM
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
